// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SStoreRPCClient is the client API for SStoreRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SStoreRPCClient interface {
	GetNewKey(ctx context.Context, in *Bucket, opts ...grpc.CallOption) (*Key, error)
	ListBuckets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (SStoreRPC_ListBucketsClient, error)
	ListKeys(ctx context.Context, in *Bucket, opts ...grpc.CallOption) (SStoreRPC_ListKeysClient, error)
	Search(ctx context.Context, in *Key, opts ...grpc.CallOption) (SStoreRPC_SearchClient, error)
	Version(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Key, error)
	Put(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Key, error)
	Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Object, error)
	Delete(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Empty, error)
}

type sStoreRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewSStoreRPCClient(cc grpc.ClientConnInterface) SStoreRPCClient {
	return &sStoreRPCClient{cc}
}

func (c *sStoreRPCClient) GetNewKey(ctx context.Context, in *Bucket, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, "/SStoreRPC/GetNewKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sStoreRPCClient) ListBuckets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (SStoreRPC_ListBucketsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SStoreRPC_serviceDesc.Streams[0], "/SStoreRPC/ListBuckets", opts...)
	if err != nil {
		return nil, err
	}
	x := &sStoreRPCListBucketsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SStoreRPC_ListBucketsClient interface {
	Recv() (*Bucket, error)
	grpc.ClientStream
}

type sStoreRPCListBucketsClient struct {
	grpc.ClientStream
}

func (x *sStoreRPCListBucketsClient) Recv() (*Bucket, error) {
	m := new(Bucket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sStoreRPCClient) ListKeys(ctx context.Context, in *Bucket, opts ...grpc.CallOption) (SStoreRPC_ListKeysClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SStoreRPC_serviceDesc.Streams[1], "/SStoreRPC/ListKeys", opts...)
	if err != nil {
		return nil, err
	}
	x := &sStoreRPCListKeysClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SStoreRPC_ListKeysClient interface {
	Recv() (*Key, error)
	grpc.ClientStream
}

type sStoreRPCListKeysClient struct {
	grpc.ClientStream
}

func (x *sStoreRPCListKeysClient) Recv() (*Key, error) {
	m := new(Key)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sStoreRPCClient) Search(ctx context.Context, in *Key, opts ...grpc.CallOption) (SStoreRPC_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SStoreRPC_serviceDesc.Streams[2], "/SStoreRPC/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &sStoreRPCSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SStoreRPC_SearchClient interface {
	Recv() (*Key, error)
	grpc.ClientStream
}

type sStoreRPCSearchClient struct {
	grpc.ClientStream
}

func (x *sStoreRPCSearchClient) Recv() (*Key, error) {
	m := new(Key)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sStoreRPCClient) Version(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, "/SStoreRPC/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sStoreRPCClient) Put(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, "/SStoreRPC/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sStoreRPCClient) Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Object, error) {
	out := new(Object)
	err := c.cc.Invoke(ctx, "/SStoreRPC/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sStoreRPCClient) Delete(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/SStoreRPC/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SStoreRPCServer is the server API for SStoreRPC service.
// All implementations must embed UnimplementedSStoreRPCServer
// for forward compatibility
type SStoreRPCServer interface {
	GetNewKey(context.Context, *Bucket) (*Key, error)
	ListBuckets(*Empty, SStoreRPC_ListBucketsServer) error
	ListKeys(*Bucket, SStoreRPC_ListKeysServer) error
	Search(*Key, SStoreRPC_SearchServer) error
	Version(context.Context, *Key) (*Key, error)
	Put(context.Context, *Object) (*Key, error)
	Get(context.Context, *Key) (*Object, error)
	Delete(context.Context, *Key) (*Empty, error)
	mustEmbedUnimplementedSStoreRPCServer()
}

// UnimplementedSStoreRPCServer must be embedded to have forward compatible implementations.
type UnimplementedSStoreRPCServer struct {
}

func (*UnimplementedSStoreRPCServer) GetNewKey(context.Context, *Bucket) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewKey not implemented")
}
func (*UnimplementedSStoreRPCServer) ListBuckets(*Empty, SStoreRPC_ListBucketsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListBuckets not implemented")
}
func (*UnimplementedSStoreRPCServer) ListKeys(*Bucket, SStoreRPC_ListKeysServer) error {
	return status.Errorf(codes.Unimplemented, "method ListKeys not implemented")
}
func (*UnimplementedSStoreRPCServer) Search(*Key, SStoreRPC_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedSStoreRPCServer) Version(context.Context, *Key) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedSStoreRPCServer) Put(context.Context, *Object) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (*UnimplementedSStoreRPCServer) Get(context.Context, *Key) (*Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedSStoreRPCServer) Delete(context.Context, *Key) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedSStoreRPCServer) mustEmbedUnimplementedSStoreRPCServer() {}

func RegisterSStoreRPCServer(s *grpc.Server, srv SStoreRPCServer) {
	s.RegisterService(&_SStoreRPC_serviceDesc, srv)
}

func _SStoreRPC_GetNewKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SStoreRPCServer).GetNewKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SStoreRPC/GetNewKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SStoreRPCServer).GetNewKey(ctx, req.(*Bucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _SStoreRPC_ListBuckets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SStoreRPCServer).ListBuckets(m, &sStoreRPCListBucketsServer{stream})
}

type SStoreRPC_ListBucketsServer interface {
	Send(*Bucket) error
	grpc.ServerStream
}

type sStoreRPCListBucketsServer struct {
	grpc.ServerStream
}

func (x *sStoreRPCListBucketsServer) Send(m *Bucket) error {
	return x.ServerStream.SendMsg(m)
}

func _SStoreRPC_ListKeys_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Bucket)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SStoreRPCServer).ListKeys(m, &sStoreRPCListKeysServer{stream})
}

type SStoreRPC_ListKeysServer interface {
	Send(*Key) error
	grpc.ServerStream
}

type sStoreRPCListKeysServer struct {
	grpc.ServerStream
}

func (x *sStoreRPCListKeysServer) Send(m *Key) error {
	return x.ServerStream.SendMsg(m)
}

func _SStoreRPC_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Key)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SStoreRPCServer).Search(m, &sStoreRPCSearchServer{stream})
}

type SStoreRPC_SearchServer interface {
	Send(*Key) error
	grpc.ServerStream
}

type sStoreRPCSearchServer struct {
	grpc.ServerStream
}

func (x *sStoreRPCSearchServer) Send(m *Key) error {
	return x.ServerStream.SendMsg(m)
}

func _SStoreRPC_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SStoreRPCServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SStoreRPC/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SStoreRPCServer).Version(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _SStoreRPC_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SStoreRPCServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SStoreRPC/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SStoreRPCServer).Put(ctx, req.(*Object))
	}
	return interceptor(ctx, in, info, handler)
}

func _SStoreRPC_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SStoreRPCServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SStoreRPC/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SStoreRPCServer).Get(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _SStoreRPC_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SStoreRPCServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SStoreRPC/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SStoreRPCServer).Delete(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

var _SStoreRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SStoreRPC",
	HandlerType: (*SStoreRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNewKey",
			Handler:    _SStoreRPC_GetNewKey_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _SStoreRPC_Version_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _SStoreRPC_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SStoreRPC_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SStoreRPC_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListBuckets",
			Handler:       _SStoreRPC_ListBuckets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListKeys",
			Handler:       _SStoreRPC_ListKeys_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Search",
			Handler:       _SStoreRPC_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
